{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/char.js","webpack:///./src/scripts/monster.js","webpack:///./src/scripts/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","playerImg","Image","src","char","document","getElementById","getContext","octopusIMG","octopusATK","vampireIMG","vampireATK","werewolfIMG","werewolfATK","reaperIMG","reaperATK","Monster","type","x","y","this","currentHP","maxHP","monsterIMG","monsterATK","dmg","attackX","attackY","moved","charX","charY","Math","abs","num","itemDrop","floor","random","console","log","rng","goldBar","wall","door","floorBGColor","healthPotion","manaPotion","atkPotion","defPotion","invulnPotion","deathPotion","sword","showInvCursor","invCursorX","maxWidth","invCursorY","invCursorPos","items","monsters","newRoom","monsterNum","maxHeight","monsterType","restartGame","goldCount","inventory","currentMP","maxMP","userATK","userDef","atkTurns","defTurns","invulnTurns","showAttack","attackBlock","monstersMove","gameOver","showControls","moveChar","gameCanvas","togglePause","dx","dy","window","monsterBlock","values","forEach","row","monster","beginPath","globalAlpha","fillStyle","rect","fill","font","fillText","closePath","newX","newY","movedRoom","monsterTurn","takeTurn","dxMon","dyMon","dxMonNorm","dyMonNorm","newMonX","newMonY","canMoveX","canMoveY","undefined","tempMon","clearRect","j","drawImage","keys","itemName","length","push","slice","concat","cD","invHeight","strokeStyle","stroke","hpYCoord","toggleAttack","bool","useInvCursor","paused","canvas","width","height","setTimeout","addEventListener","e","preventDefault","newCursorX","newCursorY","invXCoord","invYCoord","moveInvCursor","useItem","attackDir","takeDmg","item","randomDrop","err","attack"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import {floorBGColor} from \"./game\";\n\n\nvar playerImg = new Image();\nplayerImg.src = \"https://image.flaticon.com/icons/svg/2328/2328493.svg\";\n\nexport let cD = 50; // character dimension\n// Players starting position\nexport const startX = 9;\nexport const startY = 5;\n\nlet x = cD * startX;\nlet y = cD * startY;\n\n\nconst canvas = document.getElementById(\"gameCanvas\");\nconst char = canvas.getContext(\"2d\");\n\nexport function renderChar(newX, newY) {\n    char.beginPath();\n    char.fillStyle = floorBGColor;\n    // char.rect(x * cD, y * cD, cD, cD);\n    // char.rect(newX * cD, newY * cD, cD, cD);\n    char.fill();\n    char.drawImage(playerImg, newX * cD, newY * cD, cD, cD);\n\n\n    x = newX;\n    y = newY;\n    char.closePath(); \n}","\n\n// Random Number Generator\nconst rng = (num) => Math.floor(Math.random() * num) + 1;\n\nvar octopusIMG = new Image();\noctopusIMG.src = \"https://image.flaticon.com/icons/svg/2196/2196893.svg\";\n\nvar octopusATK = new Image();\noctopusATK.src = \"https://image.flaticon.com/icons/svg/651/651510.svg\";\n\nvar vampireIMG = new Image();\nvampireIMG.src = \"https://image.flaticon.com/icons/svg/2286/2286964.svg\";\n\nvar vampireATK = new Image();\nvampireATK.src = \"https://image.flaticon.com/icons/svg/209/209853.svg\";\n\nvar werewolfIMG = new Image();\nwerewolfIMG.src = \"https://image.flaticon.com/icons/svg/2534/2534552.svg\";\n\nvar werewolfATK = new Image();\nwerewolfATK.src = \"https://image.flaticon.com/icons/svg/2068/2068587.svg\";\n\nvar reaperIMG = new Image();\nreaperIMG.src = \"https://image.flaticon.com/icons/svg/2624/2624475.svg\";\n\nvar reaperATK = new Image();\nreaperATK.src = \"https://image.flaticon.com/icons/svg/2674/2674440.svg\";\n\nexport class Monster{\n    constructor(type, x, y){\n        switch(type){\n            case \"o\":\n                this.name = \"Octopus\";\n                this.currentHP = 100;\n                this.maxHP = 100;\n                this.monsterIMG = octopusIMG;\n                this.monsterATK = octopusATK;\n                this.dmg = 10;\n                break;\n            case \"w\":\n                this.name = \"Werewolf\";\n                this.currentHP = 150;\n                this.maxHP = 150;\n                this.monsterIMG = werewolfIMG;\n                this.monsterATK = werewolfATK;\n                this.dmg = 20;\n                break;\n            case \"v\":\n                this.name = \"Vampire\";\n                this.currentHP = 200;\n                this.maxHP = 200;\n                this.monsterIMG = vampireIMG;\n                this.monsterATK = vampireATK;\n                this.dmg = 50;\n                break;\n            case \"r\":\n                this.name = \"Reaper\";\n                this.currentHP = 1000;\n                this.maxHP = 1000;\n                this.monsterIMG = reaperIMG;\n                this.monsterATK = reaperATK;\n                this.dmg = 90;\n                break;\n            default:\n                this.name = \"Unknown\";\n                this.currentHP = 1;\n                this.maxHP = 1;\n                this.monsterIMG = octopusIMG;\n                this.monsterATK = octopusATK;\n                this.dmg = 1;\n        }\n        this.x = x;\n        this.y = y;\n        this.attackX = null;\n        this.attackY = null;\n        this.moved = false;\n    }\n\n    takeDmg(dmg){\n        this.currentHP -= dmg;\n        return this.currentHP;\n    }\n\n    takeTurn(charX, charY){\n        if(this.attackX !== null){\n            // Attacking the character this turn\n            return true // return true for attacking\n        } else {\n            if ((charX === this.x && Math.abs(charY-this.y) === 1) || (charY === this.y && Math.abs(charX - this.x) === 1)){\n                this.attackX = charX;\n                this.attackY = charY;\n                return null;\n            }\n            //Move the monster towards the player\n            return false // return false for not attacking\n        }\n        \n    }\n\n    randomDrop() {\n        const itemDrop = rng(100);\n        console.log(itemDrop);\n        switch(this.name){\n            case \"Octopus\":\n                if(itemDrop > 80){\n                    return \"HP\";\n                } else {\n                    return \"G\";\n                }\n            case \"Werewolf\":\n                if(itemDrop > 90){\n                    return \"HP\";\n                // } else if(itemDrop > 80){\n                //     return \"MP\";\n                } else {\n                    return \"G\";\n                }\n            case \"Vampire\":\n                if (itemDrop > 95) {\n                    return \"INVULN\";\n                } else if (itemDrop > 80) {\n                    return \"ATK\";\n                } else if(itemDrop > 65){\n                    return \"DEF\";\n                } else if(itemDrop > 50){\n                    return \"HP\";\n                // } else if(itemDrop > 40){\n                //     return \"MP\"\n                } else {\n                    return \"G\"\n                }\n            case \"Reaper\":\n                if(itemDrop > 50){\n                    return \"DEATH\";\n                } else if(itemDrop > 10){\n                    return \"INVULN\";\n                } else {\n                    return \"HP\";\n                }\n            case \"Unknown\":\n                return \"G\";\n        }\n    }\n}\n","import { cD, renderChar, startX, startY } from \"./char\";\nimport { Monster} from \"./monster\";\n\n// Random Number Generator\nconst rng = (num) => Math.floor(Math.random() * num)+1;\n//Images\nvar goldBar = new Image();\ngoldBar.src = \"https://image.flaticon.com/icons/svg/362/362944.svg\";\n\nvar wall = new Image();\nwall.src = \"https://image.flaticon.com/icons/svg/351/351764.svg\";\nvar door = new Image();\ndoor.src = \"https://www.flaticon.com/premium-icon/icons/svg/2401/2401054.svg\";\n\nexport const floorBGColor = \"#999\";\n\nvar healthPotion = new Image();\nhealthPotion.src = \"https://image.flaticon.com/icons/svg/506/506927.svg\";\nvar manaPotion = new Image();\nmanaPotion.src = \"https://image.flaticon.com/icons/svg/1006/1006951.svg\";\nvar atkPotion = new Image();\natkPotion.src = \"https://image.flaticon.com/icons/svg/649/649081.svg\";\nvar defPotion = new Image();\ndefPotion.src = \"https://image.flaticon.com/icons/svg/1615/1615647.svg\";\nvar invulnPotion = new Image();\ninvulnPotion.src = \"https://image.flaticon.com/icons/svg/2119/2119271.svg\";\nvar deathPotion = new Image();\ndeathPotion.src = \"https://image.flaticon.com/icons/svg/1234/1234921.svg\";\n\nvar sword = new Image();\nsword.src = \"https://image.flaticon.com/icons/svg/361/361806.svg\";\n// width and height of dungeons\nexport const maxWidth = 19;\nexport const maxHeight = 11;\n// Inventory Coords\nconst invXCoord = maxWidth * cD + 22;\nconst invYCoord = 90;\nconst invWidth = 5;\nconst invHeight = 5;\n// Inventory Cursor\nlet showInvCursor = false;\nlet invCursorX = maxWidth * cD + 22;\nlet invCursorY = 90;\nlet invCursorPos = 0;\n// Char Pos\nlet char = [startX, startY];\n// HP Bar\nconst hpXCoord = maxWidth * cD + 22;\nconst hpYCoord = 45;\nconst hpHeight = 15\n// TODO: Implement rooms object when ready\n// let rooms = {}; // 9 * 9 room. player starts in [5][5]\n// for(let i = 0; i < 10; i++){\n//      rooms[i] = {};\n// }\n// let currentRoom = [5,5];\n// Items in the room\nlet items = {};\nlet monsters = {};\n\nconst newRoom = () => { // Generate a new room\n    monsters = {};\n    items = {\n        \"G\":[],\n        \"HP\":[],\n        \"MP\":[],\n        \"ATK\": [],\n        \"DEF\": [],\n        \"INVULN\": [],\n        \"DEATH\": [],\n    };\n    for (let i = 1; i < maxWidth-1; i++) {\n        monsters[i] = {};\n    }\n    // Monster generator\n    // let monsterNum = Math.floor((rng(100)-(100-monsterLimit*10)+9)/10);\n    let monsterNum = Math.floor(Math.log(rng(34)-10));\n    for(let i = 0; i < monsterNum; i++){\n        let x = char[0];\n        let y = char[1];\n        while(char[0] === x && char[1] === y) {\n            x = rng(maxWidth - 2);\n            y = rng(maxHeight - 2);\n        }\n        const monsterType = rng(100);\n        if (monsterType > 98) {\n            monsters[x][y] = new Monster(\"r\", x, y)\n        } else if (monsterType > 80) {\n            monsters[x][y] = new Monster(\"v\", x, y)\n        } else if (monsterType > 50) {\n            monsters[x][y] = new Monster(\"w\", x, y)\n        } else{\n            monsters[x][y] = new Monster(\"o\", x, y)\n        }\n    }\n}\n\nexport const restartGame = () => {\n    // Some Health Potions\n    char = [startX, startY];\n    goldCount = 0;\n    inventory = [\"HP\", \"ATK\", \"DEF\", \"INVULN\", \"DEATH\"];\n    currentHP = 20;\n    maxHP = 100;\n    currentMP = 100;\n    maxMP = 100;\n    userATK = 50;\n    userDef = 0;\n    //Potion Effects\n    atkTurns = 0;\n    defTurns = 0;\n    invulnTurns = 0;\n    showAttack = false; // When you prep an attack, it'll show your attack range\n    attackBlock = [null, null]; // the attack coords of your character\n    monstersMove = false; // Tells you when the monsters should move\n    gameOver = false;\n    showControls = false;\n    newRoom();\n    items = { // Initial Room has items for player\n        \"G\": [[17, 1], [17, 2]],\n        \"HP\": [[16, 2], [16, 3]],\n        \"MP\": [],\n        \"ATK\": [],\n        \"DEF\": [],\n        \"INVULN\": [],\n        \"DEATH\": [],\n    };\n    moveChar(0, 0);\n}\n// Some Health Potions\nlet goldCount = 0;\nlet inventory = [\"HP\", \"ATK\", \"DEF\", \"INVULN\", \"DEATH\"];\nlet currentHP = 20;\nlet maxHP = 100;\nlet currentMP = 100;\nlet maxMP = 100;\nlet userATK = 50;\nlet userDef = 0;\n//Potion Effects\nlet atkTurns = 0;\nlet defTurns = 0;\nlet invulnTurns = 0;\nlet showAttack = false; // When you prep an attack, it'll show your attack range\nlet attackBlock = [null,null]; // the attack coords of your character\nlet monstersMove = false; // Tells you when the monsters should move\nlet gameOver = false; \nlet showControls = false;\n// TODO: might have to change to dx, dy in the future when implementing different weapons \n// Drawing Board\nconst canvas = document.getElementById(\"gameCanvas\"); // The actual canvas element\nconst gameCanvas = canvas.getContext(\"2d\"); // The paintbrush to draw everything required for this game\nexport const togglePause = () =>{\n    showControls = !showControls;\n    moveChar(0,0);\n}\n// This is used to move the character. moveChar(0,0) is usually used to re-render the game\nexport const moveChar = (dx, dy) => {\n    window.items = items;\n    if (char[0] < 0){return;} // The character has died\n    // Check to see if character is out of bounds\n    if(char[0] + dx === 0 || char[0] + dx === maxWidth-1){\n        if (char[1] !== (maxHeight - 1) / 2) {return;}\n    }\n    if(char[1] + dy === 0 || char[1] + dy === maxHeight-1){\n        if (char[0] !== (maxWidth - 1) / 2)  {return;}\n    }\n    // Check to see if monster is blocking the characters movement\n    let monsterBlock = false; \n    Object.values(monsters).forEach(row => {\n        Object.values(row).forEach(monster => {\n            if (monster.x === char[0] + dx && monster.y === char[1] + dy) {\n                monsterBlock = true; // Character is blocked from moving here\n            }\n        })\n    })\n    // If not blocked by monster, continue the action\n    if(!monsterBlock && !showControls){\n        char[0] += dx;\n        char[1] += dy;\n        let movedRoom = false;\n        // Check to see if the player went through a door\n        // TODO: Make sure to only render doors that are valid (right now it's infinite dungeon)\n        if(char[1] === (maxHeight-1)/2){\n            if (char[0] === 0) {\n                char[0] = maxWidth - 2;\n                newRoom();\n                movedRoom = true;\n            } else if (char[0] === maxWidth-1) {\n                char[0] = 1;\n                newRoom();\n                movedRoom = true;\n            }\n        } else if(char[0] === (maxWidth-1)/2){\n            if(char[1] === 0){\n                char[1] = maxHeight-2;\n                newRoom();\n                movedRoom = true;\n            } else if (char[1] === maxHeight-1){\n                char[1] = 1;\n                newRoom();\n                movedRoom = true;\n            }\n        }\n        // if the player moved (but not to another room) and the monsters are allowed to move\n        // then the monsters will take their turn\n        if ((dx + dy !== 0 || monstersMove) && !movedRoom) {\n            monstersMove = false;\n            Object.values(monsters).forEach(row => {\n                Object.values(row).forEach(monster => {\n                    if (monster.moved) { return; } // if the monster already moved this turn,\n                    const monsterTurn = monster.takeTurn(char[0], char[1]);\n                    if (monsterTurn) { // If this returns true, the monster will be attacking a position\n                        if (invulnTurns === 0 && monster.attackX === char[0] && monster.attackY === char[1]) {\n                            // If player is in the attack range, lose health\n                            currentHP -= (monster.dmg - userDef);\n                        }\n                        // Attack has completed. Now set it to null\n                        monster.attackX = null;\n                        monster.attackY = null;\n                    } else if (monsterTurn === false) { // Not close enough to attack the player\n                        // Difference between char and monster\n                        const dxMon = char[0] - monster.x;\n                        const dyMon = char[1] - monster.y;\n                        // A step towards the player\n                        const dxMonNorm = Math.abs(dxMon) / dxMon || 0;\n                        const dyMonNorm = Math.abs(dyMon) / dyMon || 0;\n                        // New Pos if they move\n                        const newMonX = monster.x + dxMonNorm;\n                        const newMonY = monster.y + dyMonNorm;\n                        // can move in that direction\n                        let canMoveX = true;\n                        let canMoveY = true;\n                        // Check if monsters are blocking\n                        if (monsters[monster.x][newMonY] !== undefined) {\n                            canMoveY = false;\n                        }\n                        if (monsters[newMonX][monster.y] !== undefined) {\n                            canMoveX = false;\n                        }\n                        // Temporarily save the monster, delete the monster from monsters object\n                        // Then move the monster and save it in the new coords\n                        const tempMon = monster;\n                        delete monsters[monster.x][monster.y]\n                        if (rng(100) < 50) {\n                            if (canMoveY) {\n                                tempMon.y = newMonY;\n                            } else if(canMoveX){\n                                tempMon.x = newMonX;\n                            }\n                        } else {\n                            if (canMoveX) {\n                                tempMon.x = newMonX;\n                            } else if (canMoveY) {\n                                tempMon.y = newMonY;\n                            }\n                        }\n                        tempMon.moved = true;\n                        monsters[tempMon.x][tempMon.y] = tempMon;\n                    }\n                })\n            })\n            // Potions wears off over time\n            if (invulnTurns > 0) {\n                invulnTurns--;\n            }\n            if (defTurns > 0) {\n                defTurns--;\n                if (defTurns == 0) {\n                    userDef = 0;\n                }\n            }\n            if (atkTurns > 0) {\n                atkTurns--;\n                if (atkTurns == 0) {\n                    userATK = 50;\n                }\n            }\n        }\n        // once all the monsters have moved, we will set it back to false for next turn\n        Object.values(monsters).forEach(row => {\n            Object.values(row).forEach(monster => {\n                monster.moved = false; \n            })\n        })\n        // If currentHP <= 0, we set gameOver to true so we player can't do anything\n        if (currentHP <= 0) {\n            currentHP = 0;\n            char[0] = -1000;\n            char[1] = -1000;\n            gameOver = true;\n        }\n    } else if(showControls){\n        gameCanvas.beginPath();\n        gameCanvas.globalAlpha = 0.5;\n        gameCanvas.fillStyle = \"#555\";\n        gameCanvas.rect(100, 100, (maxWidth-4)*cD, (maxHeight-4)*cD);\n        gameCanvas.fill();\n        gameCanvas.font = \"25px Roboto, sans serif\"\n        gameCanvas.fillStyle = \"#FFF\";\n        gameCanvas.fillText(\"Arrow keys = Movement\", 110, 140)\n        gameCanvas.fillText(\"Spacebar = Use Item/Start Attack\", 110, 170)\n        gameCanvas.fillText(\"Z = Inventory\", 110, 200)\n        gameCanvas.fillText(\"Spacebar (After Starting Attack) = Attack/Wait\", 110, 230)\n        gameCanvas.fillText(\"R = Restarts Game\", 110, 260)\n        gameCanvas.font = \"15px Roboto, sans serif\"\n        gameCanvas.fillText(\"Waiting occurs when you hit an empty area\", 500, 245)\n        gameCanvas.font = \"30px Roboto, sans serif\"\n        gameCanvas.fillText(\"Esc = Show/Hide Controls\", 110, 430)\n        gameCanvas.globalAlpha = 1;\n        gameCanvas.closePath()\n        return;\n    } else {return;} // if character is blocked by the monster, don't move here\n    // Drawing Floor, Walls, Items, and Monsters\n    gameCanvas.beginPath();\n    if(showInvCursor || gameOver){\n        gameCanvas.globalAlpha = 0.5;\n    }\n    gameCanvas.clearRect(0, 0, maxWidth * cD, maxHeight * cD);\n    gameCanvas.closePath();\n    for(let i = 1; i < maxWidth-1; i++){\n        for(let j = 1; j < maxHeight-1; j++){\n            //Dungeon Floor\n            gameCanvas.beginPath();\n            gameCanvas.rect(i * cD, j * cD, cD, cD);\n            gameCanvas.fillStyle = floorBGColor;\n            gameCanvas.fill();\n            gameCanvas.closePath();\n        }\n    }\n    gameCanvas.beginPath();\n    // Drawing the walls\n    for (let i = 0; i < maxWidth; i++) {\n        if (i === 0 || i === maxWidth - 1) {\n            for (let j = 0; j <= maxHeight; j++) {\n                if (j === (maxHeight - 1) / 2) {\n                    gameCanvas.drawImage(door, i*cD, j*cD, cD, cD);\n                } else {\n                    gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\n                }\n            }\n            continue;\n        }\n        for (let j = 0; j < maxHeight; j++) {\n            if (j === 0 || j === maxHeight - 1) {\n                if (i === (maxWidth - 1) / 2) {\n                    gameCanvas.drawImage(door, i * cD, j * cD, cD, cD);\n                } else {\n                    gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\n                }\n            }\n        }\n    }\n    // Drawing Items\n    Object.keys(items).forEach(itemName =>{\n        for(let i = 0; i < items[itemName].length; i++){\n            // If character is standing on the item, push it to their inventory\n            const x = items[itemName][i][0];\n            const y = items[itemName][i][1];\n            if ( x === char[0] && y === char[1]){\n                \n                if(itemName === \"G\"){goldCount++;}\n                else { inventory.push(itemName);}\n\n                items[itemName] = items[itemName].slice(0, i).concat(items[itemName].slice(i + 1, items.length));\n                i--;\n            } else {\n                switch(itemName){\n                    case \"G\":\n                        gameCanvas.drawImage(goldBar, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"HP\":\n                        gameCanvas.drawImage(healthPotion, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"MP\":\n                        gameCanvas.drawImage(manaPotion, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"ATK\":\n                        gameCanvas.drawImage(atkPotion, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"DEF\":\n                        gameCanvas.drawImage(defPotion, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"INVULN\":\n                        gameCanvas.drawImage(invulnPotion, x * cD, y * cD, cD, cD);\n                        break;\n                    case \"DEATH\":\n                        gameCanvas.drawImage(deathPotion, x * cD, y * cD, cD, cD);\n                        break;\n\n                    default:\n                        console.log(`Unknown Item: ${itemName}`)\n                        break;\n                }\n            }\n        }\n    })\n    // for (let i = 0; i < maxWidth; i++) {\n    //     for (let j = 0; j < maxHeight; j++) {\n    //         let renderGold = false;\n    //         let renderHP = false;\n    //         let renderMP = false;\n    //         // render Walls.\n    //         // iterate through items\n    //         // for(let k = 0; k < wC[i][j].length; k++){\n    //         //     switch (wC[i][j][k]) {\n    //         //         case \"w\":\n    //         //             // gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\n    //         //             renderWall = true;\n    //         //             break;\n    //         //         case \"d\":\n    //         //             renderDoor = true;\n    //         //             break;\n    //         //         case \"G\":\n    //         //             // gameCanvas.drawImage(goldBar, i * cD, j * cD, cD, cD);\n    //         //             renderGold = true;\n    //         //             break;\n    //         //         case \"HP\":\n    //         //             // gameCanvas.drawImage(healthPotion, i * cD, j * cD, cD, cD);\n    //         //             renderHP = true;\n    //         //             break;\n    //         //         case \"MP\":\n    //         //             // gameCanvas.drawImage(manaPotion, i * cD, j * cD, cD, cD);\n    //         //             renderMP = true;\n    //         //             break;\n    //         //         default:\n    //         //             break;\n    //         //     }\n    //         // }\n    //         if (renderGold) { gameCanvas.drawImage(goldBar, i * cD, j * cD, cD, cD); }\n    //         if (renderHP) { gameCanvas.drawImage(healthPotion, i * cD, j * cD, cD, cD); }\n    //         if (renderMP) { gameCanvas.drawImage(manaPotion, i * cD, j * cD, cD, cD); }\n    //     }\n    // }\n    // Render the character\n    // If they're invuln, make them 0.1 to indicate invulnerability\n    if(invulnTurns > 0){\n        gameCanvas.globalAlpha = 0.1;\n    }\n    renderChar(char[0], char[1]);\n    if (invulnTurns > 0) {\n        gameCanvas.globalAlpha = 1;\n    }\n    // Render Monsters\n    Object.values(monsters).forEach(row => {\n        Object.values(row).forEach(monster => {\n        // const monster = monsters[i][j];\n            gameCanvas.drawImage(monster.monsterIMG, monster.x * cD, monster.y * cD, cD, cD);\n            // If monsters have less health than max health, render it\n            if (monster.currentHP < monster.maxHP) { \n                gameCanvas.fillStyle = \"#FFF\";\n                gameCanvas.rect(monster.x*cD, monster.y*cD, cD, 10);\n                gameCanvas.fill();\n                gameCanvas.closePath();\n                gameCanvas.beginPath();\n                gameCanvas.fillStyle = \"#F00\";\n                gameCanvas.rect(monster.x * cD, monster.y * cD, cD * (monster.currentHP / monster.maxHP), 10);\n                gameCanvas.fill();\n                gameCanvas.closePath();\n                gameCanvas.beginPath();\n            }\n            // if monster is attacking, show direction\n            if (monster.attackX !== null) { \n                gameCanvas.globalAlpha = 0.5;\n                gameCanvas.drawImage(monster.monsterATK, monster.attackX * cD, monster.attackY * cD, cD, cD);\n                gameCanvas.globalAlpha = 1;\n            }\n        })\n    })\n    gameCanvas.closePath();\n    if(showAttack === true){ // Show your attack range\n        gameCanvas.beginPath();\n        gameCanvas.globalAlpha = 0.8;\n        gameCanvas.drawImage(sword, attackBlock[0]*cD, attackBlock[1]*cD, cD, cD)\n        gameCanvas.globalAlpha = 1;\n        gameCanvas.closePath();\n    }\n\n    if (showInvCursor || gameOver) {\n        gameCanvas.globalAlpha = 1;\n    }\n    // Inventory UI\n    gameCanvas.beginPath();\n    gameCanvas.rect(maxWidth * cD, 0, 300, (maxHeight*cD));\n    gameCanvas.fillStyle = \"#666666\"\n    gameCanvas.fill();\n    gameCanvas.rect(invXCoord, invYCoord, cD*invWidth, (invHeight * cD))\n    gameCanvas.strokeStyle = \"#FFF\";\n    gameCanvas.stroke();\n    for(let i = 0; i < inventory.length;i++){\n        switch(inventory[i]){\n            case \"HP\":\n                gameCanvas.drawImage(healthPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            case \"MP\":\n                gameCanvas.drawImage(manaPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            case \"ATK\":\n                gameCanvas.drawImage(atkPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            case \"DEF\":\n                gameCanvas.drawImage(defPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            case \"INVULN\":\n                gameCanvas.drawImage(invulnPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            case \"DEATH\":\n                gameCanvas.drawImage(deathPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\n                break;\n            default:\n                break;\n        }\n    }\n    gameCanvas.closePath();\n    // HP Bar\n    gameCanvas.beginPath();\n    gameCanvas.rect(hpXCoord, hpYCoord, cD*5, hpHeight);\n    gameCanvas.fillStyle = \"#FFF\";\n    gameCanvas.fill();\n    gameCanvas.closePath();\n    // Current HP\n    gameCanvas.beginPath();\n    gameCanvas.rect(hpXCoord, hpYCoord, (cD*5 * currentHP/maxHP), hpHeight);\n    gameCanvas.fillStyle = \"#F00\";\n    gameCanvas.fill();\n    gameCanvas.closePath();\n    // MP Bar\n    gameCanvas.beginPath();\n    gameCanvas.rect(hpXCoord, hpYCoord+hpHeight, cD*5, hpHeight);\n    gameCanvas.fillStyle = \"#FFF\";\n    gameCanvas.fill();\n    gameCanvas.closePath();\n    // Current MP\n    gameCanvas.beginPath();\n    gameCanvas.rect(hpXCoord, hpYCoord+hpHeight, (cD*5 * currentMP/maxMP), hpHeight);\n    gameCanvas.fillStyle = \"#00F\";\n    gameCanvas.fill();\n    gameCanvas.closePath();\n    // Inventory Cursor\n    if (showInvCursor) {\n        gameCanvas.beginPath();\n        gameCanvas.font = `${cD}px Roboto, sans serif`;\n        gameCanvas.fillStyle = \"#000\";\n        gameCanvas.fillText(\"INVENTORY\", (maxWidth * cD / 2)-cD*4, maxHeight * cD / 2);\n        gameCanvas.rect(invCursorX, invCursorY, cD, cD);\n        gameCanvas.strokeStyle = \"#FFF\";\n        gameCanvas.stroke();\n        gameCanvas.closePath();\n    }\n    // Potion Status\n    gameCanvas.beginPath();\n    gameCanvas.font = `${cD / 2}px Roboto, sans serif`;\n    gameCanvas.fillStyle = \"#FFF\";\n    if (defTurns > 0) {\n        gameCanvas.fillText(`DEF UP: ${defTurns}`, maxWidth * cD + 50, maxHeight * cD - 150);\n    }\n    if (atkTurns > 0) {\n        gameCanvas.fillText(`ATK UP: ${atkTurns}`, maxWidth * cD + 50, maxHeight * cD - 100);\n    }\n    gameCanvas.closePath();\n    // Gold Counter\n    gameCanvas.beginPath();\n    gameCanvas.drawImage(goldBar, maxWidth*cD+20, 0, cD, cD);\n    gameCanvas.font = \"15px Roboto, sans serif\";\n    gameCanvas.fillStyle = \"#ffd700\"\n    gameCanvas.fillText(`x ${goldCount}`, maxWidth * 50 + 80, 30, 225);\n    gameCanvas.closePath();\n    if(gameOver){ // If player died\n        gameCanvas.beginPath();\n        gameCanvas.font = `${cD}px Roboto, sans serif`;\n        gameCanvas.fillStyle = \"#ff0000\";\n        gameCanvas.fillText(\"GAME OVER\", (maxWidth * cD / 2) - cD * 4, maxHeight * cD / 2 + 25);\n        gameCanvas.font = `${cD/2}px Roboto, sans serif`;\n        gameCanvas.fillText(\"press r to restart\", (maxWidth * cD / 2) - cD * 4, maxHeight * cD / 2 + 45)\n        gameCanvas.closePath();\n    }\n    return;\n}\n\nexport const toggleInvCursor = bool => {\n    showInvCursor = bool;\n    moveChar(0,0);\n}\n\nexport const moveInvCursor = (dx, dy) => {\n    const newCursorX = invCursorX + dx * cD;\n    const newCursorY = invCursorY + dy * cD;\n    if(newCursorX >= invXCoord && newCursorX < invXCoord + (invWidth * cD)){\n        invCursorX = newCursorX;\n        invCursorPos += dx\n    }\n    if (newCursorY >= invYCoord && newCursorY < invYCoord +(invHeight * cD)) {\n        invCursorY = newCursorY;\n        invCursorPos += (dy*5)\n    }\n    moveChar(0,0);\n}\n\nexport const useItem = () => {\n    if (inventory.length < invCursorPos + 1) {\n        gameCanvas.beginPath();\n        gameCanvas.font = \"10px Roboto, sans serif\";\n        gameCanvas.fillStyle = \"red\";\n        gameCanvas.fillText(\"Empty Slot\", char[0] * cD, char[1] * cD);\n        gameCanvas.closePath();\n    } else {\n        // Use Item\n        switch (inventory[invCursorPos]) {\n            case \"HP\":\n                currentHP += 25;\n                break;\n            case \"MP\":\n                // Mana\n                currentMP += 50;\n                break;\n            case \"ATK\":\n                // Increase Attack\n                userATK = 100;\n                atkTurns += 20;\n                break;\n            case \"DEF\":\n                // Increase Defense\n                defTurns += 20;\n                userDef = 10;\n                break;\n            case \"INVULN\":\n                // Invulnerability turns\n                invulnTurns += 30;\n                break;\n            case \"DEATH\":\n                // Kill all monsters\n                monsters = {};\n                break;\n            default:\n                break;\n        }\n        if (currentHP > maxHP) {\n            currentHP = maxHP;\n        }\n        if (currentMP > maxMP){\n            currentMP = maxMP;\n        }\n        inventory = inventory.slice(0, invCursorPos).concat(inventory.slice(invCursorPos + 1, inventory.length));\n        moveChar(0,0);\n    }\n}\n\nexport const toggleAttack = (bool=false) =>{\n    showAttack = bool || !showAttack;\n    attackBlock[0] = char[0];\n    attackBlock[1] = char[1]+1;\n    moveChar(0, 0);\n}\n\nexport const attackDir = (dx, dy) => {\n    attackBlock[0] = char[0] + dx;\n    attackBlock[1] = char[1] + dy;\n    moveChar(0,0);\n}\n\nexport const attack = () => {\n    monstersMove = true;\n    try{\n        // const damage = (atkTurns > 0) ? userATK + 50 : userATK;\n        const newHP = monsters[attackBlock[0]][attackBlock[1]].takeDmg(userATK);\n        if (newHP <= 0) {\n            const item = monsters[attackBlock[0]][attackBlock[1]].randomDrop();\n            delete monsters[attackBlock[0]][attackBlock[1]];\n            items[item].push([attackBlock[0], attackBlock[1]])\n        }\n        toggleAttack();\n    } catch (err) {\n        console.log(err);\n        toggleAttack();\n        gameCanvas.beginPath();\n        gameCanvas.font = \"8px Roboto, sans serif\";\n        gameCanvas.fillStyle = \"red\";\n        gameCanvas.fillText(\"Waited a turn\", char[0]*cD, char[1]*cD);\n        gameCanvas.closePath();\n    }\n    \n}\n\nrestartGame();","import \"./styles/index.scss\";\nimport { maxHeight, maxWidth, moveChar, useItem, moveInvCursor, toggleAttack, attack, attackDir, toggleInvCursor, togglePause, restartGame } from \"./scripts/game\"; \nimport { cD } from \"./scripts/char\";\n\nlet useInvCursor = false;\nlet showAttack = false;\nlet paused = true;\n\nconst keydownPress = e => {\n    if(e.key === \"r\" || e.key === \"R\"){\n        restartGame();\n        paused = false;\n        showAttack = false;\n        useInvCursor = false;\n        return;\n    }\n    if(e.key === \" \"){e.preventDefault();}\n    let dx = 0;\n    let dy = 0;\n    // Movement\n    if (e.key == \"Right\" || e.key == \"ArrowRight\") {\n        dx += 1;\n    } else if (e.key == \"Left\" || e.key == \"ArrowLeft\") {\n        dx -= 1;\n    } else if (e.key == \"Up\" || e.key == \"ArrowUp\") {\n        e.preventDefault();\n        dy -= 1\n    } else if (e.key == \"Down\" || e.key == \"ArrowDown\") {\n        e.preventDefault();\n        dy += 1\n    }\n    if ((e.key === \"z\" || e.key === \"Z\") && !paused) {\n        // Open Inventory\n        useInvCursor = !useInvCursor;\n        toggleInvCursor(useInvCursor);\n    } else if((e.key === \"x\" || e.key === \"X\") && showAttack && !paused) {\n        // Cancel Attack\n        toggleAttack(false);\n        showAttack = false;\n    } else if(e.key === \"Escape\" && !useInvCursor){\n        paused = !paused;\n        togglePause();\n    } else if(dx+dy != 0 && !useInvCursor && !showAttack && !paused){\n        // if the character has moved and we're not moving the inventory cursor and we're not attacking\n        moveChar(dx, dy);\n    } else if (dx+dy != 0 && useInvCursor && !paused){ \n        // useInvCursor === true => move the inventory cursor\n        moveInvCursor(dx, dy);\n    } else if (e.key === \" \" && useInvCursor && !paused){ \n        // Use Item in inventory\n        useItem();\n    } else if(dx+dy != 0 && showAttack && !paused){\n        attackDir(dx, dy);\n    } else if (e.key === \" \" && !useInvCursor && !paused){\n        // Attack\n        if(showAttack){\n            attack();\n        } else {\n            toggleAttack(true);\n        }\n        showAttack = !showAttack\n    }\n}\n\nconst canvas = document.getElementById(\"gameCanvas\");\n// canvas.width = window.innerWidth - 10;\n// canvas.height = window.innerHeight - 20;\n// Set the width and height of canvas\ncanvas.width = maxWidth * cD + 300;\ncanvas.height = maxHeight * cD;\n// moveChar renders the character without moving it\nsetTimeout(() => {\n    moveChar(0, 0)\n    togglePause();\n}, 100)\nconsole.log(\"Game Loaded\");\n// This will allow us to move the character\ndocument.addEventListener(\"keydown\", keydownPress, false);\n"],"sourceRoot":""}