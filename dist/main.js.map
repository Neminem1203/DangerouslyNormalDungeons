{"version":3,"file":"main.js","mappings":"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","sources":["webpack://dnd/./src/scripts/char.js","webpack://dnd/./src/scripts/monster.js","webpack://dnd/./src/scripts/game.js","webpack://dnd/./src/index.js"],"sourcesContent":["import {floorBGColor} from \"./game\";\r\n\r\nvar playerImg = new Image();\r\nplayerImg.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/character.svg\";\r\n\r\nexport let cD = 50; // character dimension\r\n// Players starting position\r\nexport const startX = 9;\r\nexport const startY = 5;\r\n\r\nlet x = cD * startX;\r\nlet y = cD * startY;\r\n\r\n\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\nconst char = canvas.getContext(\"2d\");\r\n\r\nexport function renderChar(newX, newY) {\r\n    char.beginPath();\r\n    char.fillStyle = floorBGColor;\r\n    // char.rect(x * cD, y * cD, cD, cD);\r\n    // char.rect(newX * cD, newY * cD, cD, cD);\r\n    char.fill();\r\n    char.drawImage(playerImg, newX * cD, newY * cD, cD, cD);\r\n\r\n\r\n    x = newX;\r\n    y = newY;\r\n    char.closePath(); \r\n}","\r\n\r\n// Random Number Generator\r\nconst rng = (num) => Math.floor(Math.random() * num) + 1;\r\n\r\nvar octopusIMG = new Image();\r\noctopusIMG.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/octopusIMG.svg\";\r\n\r\nvar octopusATK = new Image();\r\noctopusATK.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/octopusATK.svg\";\r\n\r\nvar vampireIMG = new Image();\r\nvampireIMG.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/vampire.svg\";\r\n\r\nvar vampireATK = new Image();\r\nvampireATK.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/V1ampireFang.svg\";\r\n\r\nvar werewolfIMG = new Image();\r\nwerewolfIMG.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/werewolf.svg\";\r\n\r\nvar werewolfATK = new Image();\r\nwerewolfATK.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/WerewolfFang.svg\";\r\n\r\nvar reaperIMG = new Image();\r\nreaperIMG.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/devil.svg\";\r\n\r\nvar reaperATK = new Image();\r\nreaperATK.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/devilATK.svg\";\r\n\r\nexport class Monster{\r\n    constructor(type, x, y){\r\n        switch(type){\r\n            case \"o\":\r\n                this.name = \"Octopus\";\r\n                this.currentHP = 100;\r\n                this.maxHP = 100;\r\n                this.monsterIMG = octopusIMG;\r\n                this.monsterATK = octopusATK;\r\n                this.dmg = 10;\r\n                break;\r\n            case \"w\":\r\n                this.name = \"Werewolf\";\r\n                this.currentHP = 150;\r\n                this.maxHP = 150;\r\n                this.monsterIMG = werewolfIMG;\r\n                this.monsterATK = werewolfATK;\r\n                this.dmg = 20;\r\n                break;\r\n            case \"v\":\r\n                this.name = \"Vampire\";\r\n                this.currentHP = 200;\r\n                this.maxHP = 200;\r\n                this.monsterIMG = vampireIMG;\r\n                this.monsterATK = vampireATK;\r\n                this.dmg = 50;\r\n                break;\r\n            case \"r\":\r\n                this.name = \"Reaper\";\r\n                this.currentHP = 1000;\r\n                this.maxHP = 1000;\r\n                this.monsterIMG = reaperIMG;\r\n                this.monsterATK = reaperATK;\r\n                this.dmg = 90;\r\n                break;\r\n            default:\r\n                this.name = \"Unknown\";\r\n                this.currentHP = 1;\r\n                this.maxHP = 1;\r\n                this.monsterIMG = octopusIMG;\r\n                this.monsterATK = octopusATK;\r\n                this.dmg = 1;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.attackX = null;\r\n        this.attackY = null;\r\n        this.moved = false;\r\n    }\r\n\r\n    takeDmg(dmg){\r\n        this.currentHP -= dmg;\r\n        return this.currentHP;\r\n    }\r\n\r\n    takeTurn(charX, charY){\r\n        if(this.attackX !== null){\r\n            // Attacking the character this turn\r\n            return true // return true for attacking\r\n        } else {\r\n            if ((charX === this.x && Math.abs(charY-this.y) === 1) || (charY === this.y && Math.abs(charX - this.x) === 1)){\r\n                this.attackX = charX;\r\n                this.attackY = charY;\r\n                return null;\r\n            }\r\n            //Move the monster towards the player\r\n            return false // return false for not attacking\r\n        }\r\n        \r\n    }\r\n\r\n    randomDrop() {\r\n        const itemDrop = rng(100);\r\n        switch(this.name){\r\n            case \"Octopus\":\r\n                if(itemDrop > 70){\r\n                    return \"HP\";\r\n                } else {\r\n                    return \"G\";\r\n                }\r\n            case \"Werewolf\":\r\n                if(itemDrop > 60){\r\n                    return \"HP\";\r\n                // } else if(itemDrop > 80){\r\n                //     return \"MP\";\r\n                } else {\r\n                    return \"G\";\r\n                }\r\n            case \"Vampire\":\r\n                if (itemDrop > 90) {\r\n                    return \"INVULN\";\r\n                } else if (itemDrop > 70) {\r\n                    return \"ATK\";\r\n                } else if(itemDrop > 50){\r\n                    return \"DEF\";\r\n                } else if(itemDrop > 25){\r\n                    return \"HP\";\r\n                // } else if(itemDrop > 40){\r\n                //     return \"MP\"\r\n                } else {\r\n                    return \"G\"\r\n                }\r\n            case \"Reaper\":\r\n                if(itemDrop > 40){\r\n                    return \"DEATH\";\r\n                } else if(itemDrop > 20){\r\n                    return \"INVULN\";\r\n                } else {\r\n                    return \"HP\";\r\n                }\r\n            case \"Unknown\":\r\n                return \"G\";\r\n        }\r\n    }\r\n}\r\n","import { cD, renderChar, startX, startY } from \"./char\";\r\nimport { Monster} from \"./monster\";\r\n\r\n// Random Number Generator\r\nconst rng = (num) => Math.floor(Math.random() * num)+1;\r\n//Images\r\nvar goldBar = new Image();\r\ngoldBar.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/goldIngots.svg\";\r\n\r\nvar wall = new Image();\r\nwall.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/Walls.svg\";\r\nvar door = new Image();\r\ndoor.src = \"\";\r\nvar lockedDoor = new Image();\r\nlockedDoor.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/doubleDoor.svg\";\r\n\r\nexport const floorBGColor = \"#999\";\r\n\r\nvar healthPotion = new Image();\r\nhealthPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/HealthPotion.svg\";\r\nvar manaPotion = new Image();\r\nmanaPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/ManaPotion.svg\";\r\nvar atkPotion = new Image();\r\natkPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/ATKPotion.svg\";\r\nvar defPotion = new Image();\r\ndefPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/defPotion.svg\";\r\nvar invulnPotion = new Image();\r\ninvulnPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/invulnPotion.svg\";\r\nvar deathPotion = new Image();\r\ndeathPotion.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/deathPotion.svg\";\r\n\r\nvar sword = new Image();\r\nsword.src = \"https://raw.githubusercontent.com/Neminem1203/DangerouslyNormalDungeons/refs/heads/master/src/svgs/attack.svg\";\r\n// width and height of dungeons\r\nexport const maxWidth = 19;\r\nexport const maxHeight = 11;\r\n// Inventory Coords\r\nconst invXCoord = maxWidth * cD + 22;\r\nconst invYCoord = 90;\r\nconst invWidth = 5;\r\nconst invHeight = 5;\r\n// Inventory Cursor\r\nlet showInvCursor = false;\r\nlet invCursorX = maxWidth * cD + 22;\r\nlet invCursorY = 90;\r\nlet invCursorPos = 0;\r\n// Char Pos\r\nlet char = [startX, startY];\r\n// HP Bar\r\nconst hpXCoord = maxWidth * cD + 22;\r\nconst hpYCoord = 45;\r\nconst hpHeight = 15\r\n// TODO: Implement rooms object when ready\r\n// let rooms = {}; // 9 * 9 room. player starts in [5][5]\r\n// for(let i = 0; i < 10; i++){\r\n//      rooms[i] = {};\r\n// }\r\n// let currentRoom = [5,5];\r\n// Items in the room\r\nlet items = {};\r\nlet monsters = {};\r\n\r\nconst prevRoomFunc = (x, y) => {\r\n    prevRoom[0] = x;\r\n    prevRoom[1] = y;\r\n}\r\n\r\nconst newRoom = () => { // Generate a new room\r\n    monsters = {};\r\n    items = {\r\n        \"G\":[],\r\n        \"HP\":[],\r\n        \"MP\":[],\r\n        \"ATK\": [],\r\n        \"DEF\": [],\r\n        \"INVULN\": [],\r\n        \"DEATH\": [],\r\n    };\r\n    for (let i = 1; i < maxWidth-1; i++) {\r\n        monsters[i] = {};\r\n    }\r\n    // Monster generator\r\n    // let monsterNum = Math.floor((rng(100)-(100-monsterLimit*10)+9)/10);\r\n    let monsterNum = Math.floor(Math.log(rng(34)-10));\r\n    for(let i = 0; i < monsterNum; i++){\r\n        let x = char[0];\r\n        let y = char[1];\r\n        while(char[0] === x && char[1] === y) {\r\n            x = rng(maxWidth - 2);\r\n            y = rng(maxHeight - 2);\r\n        }\r\n        const monsterType = rng(100);\r\n        if (monsterType > 98) {\r\n            monsters[x][y] = new Monster(\"r\", x, y)\r\n        } else if (monsterType > 80) {\r\n            monsters[x][y] = new Monster(\"v\", x, y)\r\n        } else if (monsterType > 50) {\r\n            monsters[x][y] = new Monster(\"w\", x, y)\r\n        } else{\r\n            monsters[x][y] = new Monster(\"o\", x, y)\r\n        }\r\n    }\r\n}\r\n\r\nexport const restartGame = () => {\r\n    // Some Health Potions\r\n    char = [startX, startY]; \r\n    showInvCursor = false;\r\n    goldCount = 0;\r\n    inventory = [\"HP\", \"ATK\", \"DEF\", \"INVULN\", \"DEATH\"];\r\n    currentHP = 20;\r\n    maxHP = 100;\r\n    currentMP = 100;\r\n    maxMP = 100;\r\n    userATK = 50;\r\n    userDef = 0;\r\n    //Potion Effects\r\n    atkTurns = 0;\r\n    defTurns = 0;\r\n    invulnTurns = 0;\r\n    prevRoom = [0,0];\r\n    showAttack = false; // When you prep an attack, it'll show your attack range\r\n    attackBlock = [null, null]; // the attack coords of your character\r\n    monstersMove = false; // Tells you when the monsters should move\r\n    gameOver = false;\r\n    showControls = false;\r\n    newRoom();\r\n    items = { // Initial Room has items for player\r\n        \"G\": [[17, 1], [17, 2]],\r\n        \"HP\": [[16, 2], [16, 3]],\r\n        \"MP\": [],\r\n        \"ATK\": [],\r\n        \"DEF\": [],\r\n        \"INVULN\": [],\r\n        \"DEATH\": [],\r\n    };\r\n    moveChar(0, 0);\r\n}\r\n// Some Health Potions\r\nlet goldCount = 0;\r\nlet inventory = [\"HP\", \"ATK\", \"DEF\", \"INVULN\", \"DEATH\"];\r\nlet currentHP = 20;\r\nlet maxHP = 100;\r\nlet currentMP = 100;\r\nlet maxMP = 100;\r\nlet userATK = 50;\r\nlet userDef = 0;\r\n//Potion Effects\r\nlet atkTurns = 0;\r\nlet defTurns = 0;\r\nlet invulnTurns = 0;\r\nlet prevRoom = [0,0];\r\nlet showAttack = false; // When you prep an attack, it'll show your attack range\r\nlet attackBlock = [null,null]; // the attack coords of your character\r\nlet monstersMove = false; // Tells you when the monsters should move\r\nlet gameOver = false; \r\nlet showControls = false;\r\n// TODO: might have to change to dx, dy in the future when implementing different weapons \r\n// Drawing Board\r\nconst canvas = document.getElementById(\"gameCanvas\"); // The actual canvas element\r\nconst gameCanvas = canvas.getContext(\"2d\"); // The paintbrush to draw everything required for this game\r\nexport const togglePause = () =>{\r\n    showControls = !showControls;\r\n    moveChar(0,0);\r\n}\r\n// This is used to move the character. moveChar(0,0) is usually used to re-render the game\r\nexport const moveChar = (dx, dy) => {\r\n    window.items = items;\r\n    if (char[0] < 0){return;} // The character has died\r\n    // Check to see if character is out of bounds\r\n    if(char[0] + dx === 0 || char[0] + dx === maxWidth-1){\r\n        if (char[1] !== (maxHeight - 1) / 2) {return;}\r\n    }\r\n    if(char[1] + dy === 0 || char[1] + dy === maxHeight-1){\r\n        if (char[0] !== (maxWidth - 1) / 2)  {return;}\r\n    }\r\n    // Check to see if monster is blocking the characters movement\r\n    let monsterBlock = false; \r\n    Object.values(monsters).forEach(row => {\r\n        Object.values(row).forEach(monster => {\r\n            if (monster.x === char[0] + dx && monster.y === char[1] + dy) {\r\n                monsterBlock = true; // Character is blocked from moving here\r\n            }\r\n        })\r\n    })\r\n    // If not blocked by monster, continue the action\r\n    \r\n    if(!monsterBlock && !showControls){\r\n        char[0] += dx;\r\n        char[1] += dy;\r\n        if (prevRoom[0] == char[0] && prevRoom[1] == char[1]){\r\n            char[0] -= dx;\r\n            char[1] -= dy;\r\n            return;\r\n        }\r\n        let movedRoom = false;\r\n        // Check to see if the player went through a door\r\n        // TODO: Make sure to only render doors that are valid (right now it's infinite dungeon)\r\n        if(char[1] === (maxHeight-1)/2){\r\n            if (char[0] === 0) {\r\n                char[0] = maxWidth - 2;\r\n                prevRoomFunc(char[0]+1, char[1])\r\n                newRoom();\r\n                movedRoom = true;\r\n            } else if (char[0] === maxWidth - 1) {\r\n                char[0] = 1;\r\n                prevRoomFunc(char[0]-1, char[1])\r\n                newRoom();\r\n                movedRoom = true;\r\n            }\r\n        } else if(char[0] === (maxWidth-1)/2){\r\n            if (char[1] === 0) {\r\n                char[1] = maxHeight-2;\r\n                prevRoomFunc(char[0], char[1]+1)\r\n                newRoom();\r\n                movedRoom = true;\r\n            } else if (char[1] === maxHeight - 1) {\r\n                char[1] = 1;\r\n                prevRoomFunc(char[0], char[1]-1)\r\n                newRoom();\r\n                movedRoom = true;\r\n            }\r\n        }\r\n        // if the player moved (but not to another room) and the monsters are allowed to move\r\n        // then the monsters will take their turn\r\n        if ((dx + dy !== 0 || monstersMove) && !movedRoom) {\r\n            monstersMove = false;\r\n            Object.values(monsters).forEach(row => {\r\n                Object.values(row).forEach(monster => {\r\n                    if (monster.moved) { return; } // if the monster already moved this turn,\r\n                    const monsterTurn = monster.takeTurn(char[0], char[1]);\r\n                    if (monsterTurn) { // If this returns true, the monster will be attacking a position\r\n                        if (invulnTurns === 0 && monster.attackX === char[0] && monster.attackY === char[1]) {\r\n                            // If player is in the attack range, lose health\r\n                            currentHP -= (monster.dmg - userDef);\r\n                        }\r\n                        // Attack has completed. Now set it to null\r\n                        monster.attackX = null;\r\n                        monster.attackY = null;\r\n                    } else if (monsterTurn === false) { // Not close enough to attack the player\r\n                        // Difference between char and monster\r\n                        const dxMon = char[0] - monster.x;\r\n                        const dyMon = char[1] - monster.y;\r\n                        // A step towards the player\r\n                        const dxMonNorm = Math.abs(dxMon) / dxMon || 0;\r\n                        const dyMonNorm = Math.abs(dyMon) / dyMon || 0;\r\n                        // New Pos if they move\r\n                        const newMonX = monster.x + dxMonNorm;\r\n                        const newMonY = monster.y + dyMonNorm;\r\n                        // can move in that direction\r\n                        let canMoveX = true;\r\n                        let canMoveY = true;\r\n                        // Check if monsters are blocking\r\n                        if (monsters[monster.x][newMonY] !== undefined) {\r\n                            canMoveY = false;\r\n                        }\r\n                        if (monsters[newMonX][monster.y] !== undefined) {\r\n                            canMoveX = false;\r\n                        }\r\n                        // Temporarily save the monster, delete the monster from monsters object\r\n                        // Then move the monster and save it in the new coords\r\n                        const tempMon = monster;\r\n                        delete monsters[monster.x][monster.y]\r\n                        if (rng(100) < 50) {\r\n                            if (canMoveY) {\r\n                                tempMon.y = newMonY;\r\n                            } else if(canMoveX){\r\n                                tempMon.x = newMonX;\r\n                            }\r\n                        } else {\r\n                            if (canMoveX) {\r\n                                tempMon.x = newMonX;\r\n                            } else if (canMoveY) {\r\n                                tempMon.y = newMonY;\r\n                            }\r\n                        }\r\n                        tempMon.moved = true;\r\n                        monsters[tempMon.x][tempMon.y] = tempMon;\r\n                    }\r\n                })\r\n            })\r\n            // Potions wears off over time\r\n            if (invulnTurns > 0) {\r\n                invulnTurns--;\r\n            }\r\n            if (defTurns > 0) {\r\n                defTurns--;\r\n                if (defTurns == 0) {\r\n                    userDef = 0;\r\n                }\r\n            }\r\n            if (atkTurns > 0) {\r\n                atkTurns--;\r\n                if (atkTurns == 0) {\r\n                    userATK = 50;\r\n                }\r\n            }\r\n        }\r\n        // once all the monsters have moved, we will set it back to false for next turn\r\n        Object.values(monsters).forEach(row => {\r\n            Object.values(row).forEach(monster => {\r\n                monster.moved = false; \r\n            })\r\n        })\r\n        // If currentHP <= 0, we set gameOver to true so we player can't do anything\r\n        if (currentHP <= 0) {\r\n            currentHP = 0;\r\n            char[0] = -1000;\r\n            char[1] = -1000;\r\n            gameOver = true;\r\n        }\r\n    } else if(showControls){\r\n        gameCanvas.beginPath();\r\n        gameCanvas.globalAlpha = 0.5;\r\n        gameCanvas.fillStyle = \"#555\";\r\n        gameCanvas.rect(100, 100, (maxWidth-4)*cD, (maxHeight-4)*cD);\r\n        gameCanvas.fill();\r\n        gameCanvas.font = \"25px Roboto, sans serif\"\r\n        gameCanvas.fillStyle = \"#FFF\";\r\n        gameCanvas.fillText(\"Arrow keys = Movement\", 110, 140)\r\n        gameCanvas.fillText(\"Spacebar = Use Item/Start Attack\", 110, 170)\r\n        gameCanvas.fillText(\"Z = Inventory\", 110, 200)\r\n        gameCanvas.fillText(\"Spacebar (After Starting Attack) = Attack/Wait\", 110, 230)\r\n        gameCanvas.fillText(\"R = Restarts Game\", 110, 260)\r\n        gameCanvas.font = \"15px Roboto, sans serif\"\r\n        gameCanvas.fillText(\"Waiting occurs when you hit an empty area\", 500, 245)\r\n        gameCanvas.font = \"30px Roboto, sans serif\"\r\n        gameCanvas.fillText(\"Esc = Show/Hide Controls\", 110, 430)\r\n        gameCanvas.globalAlpha = 1;\r\n        gameCanvas.closePath()\r\n        return;\r\n    } else {return;} // if character is blocked by the monster, don't move here\r\n    // Drawing Floor, Walls, Items, and Monsters\r\n    gameCanvas.beginPath();\r\n    if(showInvCursor || gameOver){\r\n        gameCanvas.globalAlpha = 0.5;\r\n    }\r\n    gameCanvas.clearRect(0, 0, maxWidth * cD, maxHeight * cD);\r\n    gameCanvas.closePath();\r\n    for(let i = 1; i < maxWidth-1; i++){\r\n        for(let j = 1; j < maxHeight-1; j++){\r\n            //Dungeon Floor\r\n            gameCanvas.beginPath();\r\n            gameCanvas.rect(i * cD, j * cD, cD, cD);\r\n            gameCanvas.fillStyle = floorBGColor;\r\n            gameCanvas.fill();\r\n            gameCanvas.closePath();\r\n        }\r\n    }\r\n    gameCanvas.beginPath();\r\n    // Drawing the walls\r\n    for (let i = 0; i < maxWidth; i++) {\r\n        if (i === 0 || i === maxWidth - 1) {\r\n            for (let j = 0; j <= maxHeight; j++) {\r\n                if (j === (maxHeight - 1) / 2) {\r\n                    console.log(i,j);\r\n                    if (prevRoom[0] === i && prevRoom[1] === j) {\r\n                        gameCanvas.drawImage(lockedDoor, i * cD, j * cD, cD, cD);\r\n                    } else {\r\n                        gameCanvas.drawImage(door, i * cD, j * cD, cD, cD);\r\n                    }\r\n                } else {\r\n                    gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\r\n                }\r\n            }\r\n            continue;\r\n        }\r\n        for (let j = 0; j < maxHeight; j++) {\r\n            if (j === 0 || j === maxHeight - 1) {\r\n                if (i === (maxWidth - 1) / 2) {\r\n                    console.log(i, j);\r\n                    if (prevRoom[0] === i && prevRoom[1] === j) {\r\n                        gameCanvas.drawImage(lockedDoor, i * cD, j * cD, cD, cD);\r\n                    } else {\r\n                        gameCanvas.drawImage(door, i * cD, j * cD, cD, cD);\r\n                    }\r\n                } else {\r\n                    gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Drawing Items\r\n    Object.keys(items).forEach(itemName =>{\r\n        for(let i = 0; i < items[itemName].length; i++){\r\n            // If character is standing on the item, push it to their inventory\r\n            const x = items[itemName][i][0];\r\n            const y = items[itemName][i][1];\r\n            if ( x === char[0] && y === char[1]){\r\n                \r\n                if(itemName === \"G\"){goldCount++;}\r\n                else { inventory.push(itemName);}\r\n\r\n                items[itemName] = items[itemName].slice(0, i).concat(items[itemName].slice(i + 1, items.length));\r\n                i--;\r\n            } else {\r\n                switch(itemName){\r\n                    case \"G\":\r\n                        gameCanvas.drawImage(goldBar, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"HP\":\r\n                        gameCanvas.drawImage(healthPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"MP\":\r\n                        gameCanvas.drawImage(manaPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"ATK\":\r\n                        gameCanvas.drawImage(atkPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"DEF\":\r\n                        gameCanvas.drawImage(defPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"INVULN\":\r\n                        gameCanvas.drawImage(invulnPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n                    case \"DEATH\":\r\n                        gameCanvas.drawImage(deathPotion, x * cD, y * cD, cD, cD);\r\n                        break;\r\n\r\n                    default:\r\n                        console.log(`Unknown Item: ${itemName}`)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    })\r\n    // for (let i = 0; i < maxWidth; i++) {\r\n    //     for (let j = 0; j < maxHeight; j++) {\r\n    //         let renderGold = false;\r\n    //         let renderHP = false;\r\n    //         let renderMP = false;\r\n    //         // render Walls.\r\n    //         // iterate through items\r\n    //         // for(let k = 0; k < wC[i][j].length; k++){\r\n    //         //     switch (wC[i][j][k]) {\r\n    //         //         case \"w\":\r\n    //         //             // gameCanvas.drawImage(wall, i * cD, j * cD, cD, cD);\r\n    //         //             renderWall = true;\r\n    //         //             break;\r\n    //         //         case \"d\":\r\n    //         //             renderDoor = true;\r\n    //         //             break;\r\n    //         //         case \"G\":\r\n    //         //             // gameCanvas.drawImage(goldBar, i * cD, j * cD, cD, cD);\r\n    //         //             renderGold = true;\r\n    //         //             break;\r\n    //         //         case \"HP\":\r\n    //         //             // gameCanvas.drawImage(healthPotion, i * cD, j * cD, cD, cD);\r\n    //         //             renderHP = true;\r\n    //         //             break;\r\n    //         //         case \"MP\":\r\n    //         //             // gameCanvas.drawImage(manaPotion, i * cD, j * cD, cD, cD);\r\n    //         //             renderMP = true;\r\n    //         //             break;\r\n    //         //         default:\r\n    //         //             break;\r\n    //         //     }\r\n    //         // }\r\n    //         if (renderGold) { gameCanvas.drawImage(goldBar, i * cD, j * cD, cD, cD); }\r\n    //         if (renderHP) { gameCanvas.drawImage(healthPotion, i * cD, j * cD, cD, cD); }\r\n    //         if (renderMP) { gameCanvas.drawImage(manaPotion, i * cD, j * cD, cD, cD); }\r\n    //     }\r\n    // }\r\n    // Render the character\r\n    // If they're invuln, make them 0.1 to indicate invulnerability\r\n    if(invulnTurns > 0){\r\n        gameCanvas.globalAlpha = 0.1;\r\n    }\r\n    renderChar(char[0], char[1]);\r\n    if (invulnTurns > 0) {\r\n        gameCanvas.globalAlpha = 1;\r\n    }\r\n    // Render Monsters\r\n    Object.values(monsters).forEach(row => {\r\n        Object.values(row).forEach(monster => {\r\n        // const monster = monsters[i][j];\r\n            gameCanvas.drawImage(monster.monsterIMG, monster.x * cD, monster.y * cD, cD, cD);\r\n            // If monsters have less health than max health, render it\r\n            if (monster.currentHP < monster.maxHP) { \r\n                gameCanvas.fillStyle = \"#FFF\";\r\n                gameCanvas.rect(monster.x*cD, monster.y*cD, cD, 10);\r\n                gameCanvas.fill();\r\n                gameCanvas.closePath();\r\n                gameCanvas.beginPath();\r\n                gameCanvas.fillStyle = \"#F00\";\r\n                gameCanvas.rect(monster.x * cD, monster.y * cD, cD * (monster.currentHP / monster.maxHP), 10);\r\n                gameCanvas.fill();\r\n                gameCanvas.closePath();\r\n                gameCanvas.beginPath();\r\n            }\r\n            // if monster is attacking, show direction\r\n            if (monster.attackX !== null) { \r\n                gameCanvas.globalAlpha = 0.5;\r\n                gameCanvas.drawImage(monster.monsterATK, monster.attackX * cD, monster.attackY * cD, cD, cD);\r\n                gameCanvas.globalAlpha = 1;\r\n            }\r\n        })\r\n    })\r\n    gameCanvas.closePath();\r\n    if(showAttack === true){ // Show your attack range\r\n        gameCanvas.beginPath();\r\n        gameCanvas.globalAlpha = 0.7;\r\n        gameCanvas.drawImage(sword, attackBlock[0]*cD, attackBlock[1]*cD, cD, cD)\r\n        gameCanvas.globalAlpha = 1;\r\n        gameCanvas.closePath();\r\n    }\r\n\r\n    if (showInvCursor || gameOver) {\r\n        gameCanvas.globalAlpha = 1;\r\n    }\r\n    // Inventory UI\r\n    gameCanvas.beginPath();\r\n    gameCanvas.rect(maxWidth * cD, 0, 300, (maxHeight*cD));\r\n    gameCanvas.fillStyle = \"#666666\"\r\n    gameCanvas.fill();\r\n    gameCanvas.rect(invXCoord, invYCoord, cD*invWidth, (invHeight * cD))\r\n    gameCanvas.strokeStyle = \"#FFF\";\r\n    gameCanvas.stroke();\r\n    for(let i = 0; i < inventory.length;i++){\r\n        switch(inventory[i]){\r\n            case \"HP\":\r\n                gameCanvas.drawImage(healthPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            case \"MP\":\r\n                gameCanvas.drawImage(manaPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            case \"ATK\":\r\n                gameCanvas.drawImage(atkPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            case \"DEF\":\r\n                gameCanvas.drawImage(defPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            case \"INVULN\":\r\n                gameCanvas.drawImage(invulnPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            case \"DEATH\":\r\n                gameCanvas.drawImage(deathPotion, (i%invWidth)*cD + invXCoord, Math.floor(i/invWidth)*cD + invYCoord, cD, cD)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    gameCanvas.closePath();\r\n    // HP Bar\r\n    gameCanvas.beginPath();\r\n    gameCanvas.rect(hpXCoord, hpYCoord, cD*5, hpHeight);\r\n    gameCanvas.fillStyle = \"#FFF\";\r\n    gameCanvas.fill();\r\n    gameCanvas.closePath();\r\n    // Current HP\r\n    gameCanvas.beginPath();\r\n    gameCanvas.rect(hpXCoord, hpYCoord, (cD*5 * currentHP/maxHP), hpHeight);\r\n    gameCanvas.fillStyle = \"#F00\";\r\n    gameCanvas.fill();\r\n    gameCanvas.closePath();\r\n    // MP Bar\r\n    gameCanvas.beginPath();\r\n    gameCanvas.rect(hpXCoord, hpYCoord+hpHeight, cD*5, hpHeight);\r\n    gameCanvas.fillStyle = \"#FFF\";\r\n    gameCanvas.fill();\r\n    gameCanvas.closePath();\r\n    // Current MP\r\n    gameCanvas.beginPath();\r\n    gameCanvas.rect(hpXCoord, hpYCoord+hpHeight, (cD*5 * currentMP/maxMP), hpHeight);\r\n    gameCanvas.fillStyle = \"#00F\";\r\n    gameCanvas.fill();\r\n    gameCanvas.closePath();\r\n    // Inventory Cursor\r\n    if (showInvCursor) {\r\n        gameCanvas.beginPath();\r\n        gameCanvas.font = `${cD}px Roboto, sans serif`;\r\n        gameCanvas.fillStyle = \"#000\";\r\n        gameCanvas.fillText(\"INVENTORY\", (maxWidth * cD / 2)-cD*4, maxHeight * cD / 2);\r\n        gameCanvas.rect(invCursorX, invCursorY, cD, cD);\r\n        gameCanvas.strokeStyle = \"#FFF\";\r\n        gameCanvas.stroke();\r\n        gameCanvas.closePath();\r\n    }\r\n    // Potion Status\r\n    gameCanvas.beginPath();\r\n    gameCanvas.font = `${cD / 2}px Roboto, sans serif`;\r\n    gameCanvas.fillStyle = \"#FFF\";\r\n    if (defTurns > 0) {\r\n        gameCanvas.fillText(`DEF UP: ${defTurns}`, maxWidth * cD + 50, maxHeight * cD - 150);\r\n    }\r\n    if (atkTurns > 0) {\r\n        gameCanvas.fillText(`ATK UP: ${atkTurns}`, maxWidth * cD + 50, maxHeight * cD - 100);\r\n    }\r\n    gameCanvas.closePath();\r\n    // Gold Counter\r\n    gameCanvas.beginPath();\r\n    gameCanvas.drawImage(goldBar, maxWidth*cD+20, 0, cD, cD);\r\n    gameCanvas.font = \"15px Roboto, sans serif\";\r\n    gameCanvas.fillStyle = \"#ffd700\"\r\n    gameCanvas.fillText(`x ${goldCount}`, maxWidth * 50 + 80, 30, 225);\r\n    gameCanvas.closePath();\r\n    if(gameOver){ // If player died\r\n        gameCanvas.beginPath();\r\n        gameCanvas.font = `${cD}px Roboto, sans serif`;\r\n        gameCanvas.fillStyle = \"#ff0000\";\r\n        gameCanvas.fillText(\"GAME OVER\", (maxWidth * cD / 2) - cD * 4, maxHeight * cD / 2 + 25);\r\n        gameCanvas.font = `${cD/2}px Roboto, sans serif`;\r\n        gameCanvas.fillText(\"press r to restart\", (maxWidth * cD / 2) - cD * 4, maxHeight * cD / 2 + 45)\r\n        gameCanvas.closePath();\r\n    }\r\n    return;\r\n}\r\n\r\nexport const toggleInvCursor = bool => {\r\n    showInvCursor = bool;\r\n    moveChar(0,0);\r\n}\r\n\r\nexport const moveInvCursor = (dx, dy) => {\r\n    const newCursorX = invCursorX + dx * cD;\r\n    const newCursorY = invCursorY + dy * cD;\r\n    if(newCursorX >= invXCoord && newCursorX < invXCoord + (invWidth * cD)){\r\n        invCursorX = newCursorX;\r\n        invCursorPos += dx\r\n    }\r\n    if (newCursorY >= invYCoord && newCursorY < invYCoord +(invHeight * cD)) {\r\n        invCursorY = newCursorY;\r\n        invCursorPos += (dy*5)\r\n    }\r\n    moveChar(0,0);\r\n}\r\n\r\nexport const useItem = () => {\r\n    if (inventory.length < invCursorPos + 1) {\r\n        gameCanvas.beginPath();\r\n        gameCanvas.font = \"10px Roboto, sans serif\";\r\n        gameCanvas.fillStyle = \"red\";\r\n        gameCanvas.fillText(\"Empty Slot\", char[0] * cD, char[1] * cD);\r\n        gameCanvas.closePath();\r\n    } else {\r\n        // Use Item\r\n        switch (inventory[invCursorPos]) {\r\n            case \"HP\":\r\n                currentHP += 25;\r\n                break;\r\n            case \"MP\":\r\n                // Mana\r\n                currentMP += 50;\r\n                break;\r\n            case \"ATK\":\r\n                // Increase Attack\r\n                userATK = 100;\r\n                atkTurns += 50;\r\n                break;\r\n            case \"DEF\":\r\n                // Increase Defense\r\n                defTurns += 50;\r\n                userDef = 10;\r\n                break;\r\n            case \"INVULN\":\r\n                // Invulnerability turns\r\n                invulnTurns += 30;\r\n                break;\r\n            case \"DEATH\":\r\n                // Kill all monsters\r\n                monsters = {};\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (currentHP > maxHP) {\r\n            currentHP = maxHP;\r\n        }\r\n        if (currentMP > maxMP){\r\n            currentMP = maxMP;\r\n        }\r\n        inventory = inventory.slice(0, invCursorPos).concat(inventory.slice(invCursorPos + 1, inventory.length));\r\n        moveChar(0,0);\r\n    }\r\n}\r\n\r\nexport const toggleAttack = (bool=false) =>{\r\n    showAttack = bool || !showAttack;\r\n    attackBlock[0] = char[0];\r\n    attackBlock[1] = char[1]+1;\r\n    moveChar(0, 0);\r\n}\r\n\r\nexport const attackDir = (dx, dy) => {\r\n    attackBlock[0] = char[0] + dx;\r\n    attackBlock[1] = char[1] + dy;\r\n    moveChar(0,0);\r\n}\r\n\r\nexport const attack = () => {\r\n    monstersMove = true;\r\n    try{\r\n        // const damage = (atkTurns > 0) ? userATK + 50 : userATK;\r\n        const newHP = monsters[attackBlock[0]][attackBlock[1]].takeDmg(userATK);\r\n        if (newHP <= 0) {\r\n            const item = monsters[attackBlock[0]][attackBlock[1]].randomDrop();\r\n            delete monsters[attackBlock[0]][attackBlock[1]];\r\n            items[item].push([attackBlock[0], attackBlock[1]])\r\n        }\r\n        toggleAttack();\r\n    } catch (err) {\r\n        console.log(err);\r\n        toggleAttack();\r\n        gameCanvas.beginPath();\r\n        gameCanvas.font = \"8px Roboto, sans serif\";\r\n        gameCanvas.fillStyle = \"red\";\r\n        gameCanvas.fillText(\"Waited a turn\", char[0]*cD, char[1]*cD);\r\n        gameCanvas.closePath();\r\n    }\r\n    \r\n}\r\n\r\nrestartGame();","import \"./styles/index.scss\";\r\nimport { maxHeight, maxWidth, moveChar, useItem, moveInvCursor, toggleAttack, attack, attackDir, toggleInvCursor, togglePause, restartGame } from \"./scripts/game\"; \r\nimport { cD } from \"./scripts/char\";\r\n\r\nlet useInvCursor = false;\r\nlet showAttack = false;\r\nlet paused = true;\r\n\r\nconst keydownPress = e => {\r\n    if(e.key === \"r\" || e.key === \"R\"){\r\n        restartGame();\r\n        paused = false;\r\n        showAttack = false;\r\n        useInvCursor = false;\r\n        return;\r\n    }\r\n    if(e.key === \" \"){e.preventDefault();}\r\n    let dx = 0;\r\n    let dy = 0;\r\n    // Movement\r\n    if (e.key == \"Right\" || e.key == \"ArrowRight\") {\r\n        dx += 1;\r\n    } else if (e.key == \"Left\" || e.key == \"ArrowLeft\") {\r\n        dx -= 1;\r\n    } else if (e.key == \"Up\" || e.key == \"ArrowUp\") {\r\n        e.preventDefault();\r\n        dy -= 1\r\n    } else if (e.key == \"Down\" || e.key == \"ArrowDown\") {\r\n        e.preventDefault();\r\n        dy += 1\r\n    }\r\n    if ((e.key === \"z\" || e.key === \"Z\") && !paused) {\r\n        // Open Inventory\r\n        useInvCursor = !useInvCursor;\r\n        toggleInvCursor(useInvCursor);\r\n    } else if((e.key === \"x\" || e.key === \"X\") && showAttack && !paused) {\r\n        // Cancel Attack\r\n        toggleAttack(false);\r\n        showAttack = false;\r\n    } else if(e.key === \"Escape\" && !useInvCursor){\r\n        paused = !paused;\r\n        togglePause();\r\n    } else if(dx+dy != 0 && !useInvCursor && !showAttack && !paused){\r\n        // if the character has moved and we're not moving the inventory cursor and we're not attacking\r\n        moveChar(dx, dy);\r\n    } else if (dx+dy != 0 && useInvCursor && !paused){ \r\n        // useInvCursor === true => move the inventory cursor\r\n        moveInvCursor(dx, dy);\r\n    } else if (e.key === \" \" && useInvCursor && !paused){ \r\n        // Use Item in inventory\r\n        useItem();\r\n    } else if(dx+dy != 0 && showAttack && !paused){\r\n        attackDir(dx, dy);\r\n    } else if (e.key === \" \" && !useInvCursor && !paused){\r\n        // Attack\r\n        if(showAttack){\r\n            attack();\r\n        } else {\r\n            toggleAttack(true);\r\n        }\r\n        showAttack = !showAttack\r\n    }\r\n}\r\n\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\n// canvas.width = window.innerWidth - 10;\r\n// canvas.height = window.innerHeight - 20;\r\n// Set the width and height of canvas\r\ncanvas.width = maxWidth * cD + 300;\r\ncanvas.height = maxHeight * cD;\r\n// moveChar renders the character without moving it\r\nsetTimeout(() => {\r\n    moveChar(0, 0)\r\n    togglePause();\r\n}, 100)\r\nconsole.log(\"Game Loaded\");\r\n// This will allow us to move the character\r\ndocument.addEventListener(\"keydown\", keydownPress, false);\r\n"],"names":["playerImg","Image","src","cD","x","y","char","document","getElementById","getContext","octopusIMG","octopusATK","vampireIMG","vampireATK","werewolfIMG","werewolfATK","reaperIMG","reaperATK","Monster","constructor","type","this","name","currentHP","maxHP","monsterIMG","monsterATK","dmg","attackX","attackY","moved","takeDmg","takeTurn","charX","charY","Math","abs","randomDrop","itemDrop","floor","random","rng","num","goldBar","wall","door","lockedDoor","floorBGColor","healthPotion","manaPotion","atkPotion","defPotion","invulnPotion","deathPotion","sword","invXCoord","maxWidth","invYCoord","showInvCursor","invCursorX","invCursorY","invCursorPos","hpXCoord","items","monsters","prevRoomFunc","prevRoom","newRoom","i","monsterNum","log","maxHeight","monsterType","restartGame","goldCount","inventory","currentMP","maxMP","userATK","userDef","atkTurns","defTurns","invulnTurns","showAttack","attackBlock","monstersMove","gameOver","showControls","moveChar","gameCanvas","togglePause","dx","dy","window","monsterBlock","Object","values","forEach","row","monster","beginPath","globalAlpha","fillStyle","rect","fill","font","fillText","closePath","movedRoom","monsterTurn","dxMon","dyMon","dxMonNorm","dyMonNorm","newMonX","newMonY","canMoveX","canMoveY","undefined","tempMon","clearRect","j","console","drawImage","newX","newY","keys","itemName","length","push","slice","concat","invHeight","strokeStyle","stroke","hpYCoord","toggleAttack","bool","useInvCursor","paused","canvas","width","height","setTimeout","addEventListener","e","key","preventDefault","moveInvCursor","newCursorX","newCursorY","useItem","attackDir","attack","item","err"],"sourceRoot":""}